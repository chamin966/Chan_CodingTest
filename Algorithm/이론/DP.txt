다이나믹 프로그래밍(DP, 동적 계획법)
: 메모리를 더 사용하여 시간 복잡도를 개선할 때 많이 사용된다.
: 구체적으로, 시간 복잡도가 비효율적인 알고리즘이 있을 때
부분 문제의 반복이 발생하는 경우 적용하면 효과적이다.
=> 다이나믹 프로그래밍 문제를 해결하기 위해
점화식(반복되는 부분 문제)을 찾는 것이 핵심적인 과정이다.

다이나믹 프로그래밍의 사용 조건
1. 최적 부분 구조
- 큰 문제를 유사한 형태의 작은 문제로 나눌 수 있으며,
작은 문제의 답을 모아 큰 문제를 해결할 수 있는 형태
=> 재귀 함수로 구현된다.
2. 반복되는 부분 문제
- 동일한 작은 문제를 반복적으로 해결해야 한다.

예시
피보나치 수열 예시: [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, …]
- 점화식: 인접한 항으로 현재 값을 결정하는 관계식을 의미한다.
-> 일반적으로 최적 부분 구조를 만족한다는 특징이 있다.
- 피보나치 수열의 점화식: 𝑎𝑛 = 𝑎𝑛−1 + 𝑎𝑛−2 (초기 항: 𝑎1 = 1, 𝑎2 = 1)

• 점화식의 기본적인 구성 요소는 다음과 같다.
1. 초기항
2. 인접한 항과의 관계
• 점화식은 [재귀 함수]로 표현할 수 있다.
• 재귀 함수는 무한 루프에 빠지지 않기 위해 [종료 조건]이 있어야 하는데,
점화식의 초기항이 종료 조건과 같은 역할을 수행한다.

// 피보나치 함수를 재귀함수로 표현
점화식: 𝑎𝑛 = 𝑎𝑛−1 + 𝑎𝑛−2 (초기 항: 𝑎1 = 1, 𝑎2 = 1)
function fibo(x) {
  // 초기항이 종료 조건이 된다
  if(x === 1 || x === 2) return 1;
  // 점화식의 내용은 f(x)의 리턴값에 들어간다.  
  return fibo(x - 1) + fibo(x - 2);
}