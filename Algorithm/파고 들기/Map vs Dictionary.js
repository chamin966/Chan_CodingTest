/** 

자바스크립트에서 Map 객체와 딕셔너리는 모두 키-값 쌍을 저장하는 자료 구조입니다. 그러나 두 객체 간에는 몇 가지 중요한 차이점이 있습니다.

1. 데이터 저장 방식:
Map 객체: Map은 원소를 삽입한 순서대로 유지합니다. 키는 중복될 수 없으며, 각 키는 해당하는 값과 연결됩니다.
딕셔너리: 딕셔너리는 키-값 쌍을 해시 함수를 사용하여 저장합니다. 따라서 키의 순서는 보장되지 않으며, 중복된 키를 가질 수 없습니다.

2. 키의 타입:
Map 객체: Map은 모든 데이터 타입을 키로 사용할 수 있습니다. 즉, 원시 타입 (문자열, 숫자, 불리언 등) 및 객체 (함수, 배열, 객체 등)를 모두 키로 사용할 수 있습니다.
딕셔너리: 딕셔너리의 키는 주로 문자열 또는 심볼 타입으로 사용됩니다. 원시 타입과 객체를 모두 사용할 수 있지만, 일반적으로 문자열이나 심볼이 가장 많이 사용됩니다.

3. 크기 및 성능:
Map 객체: Map은 동적으로 크기가 조정되므로 원소의 개수에 제한이 없습니다. 대량의 데이터를 처리할 때 유용합니다. 검색, 삽입, 삭제 작업의 성능이 일반적으로 빠르며, 특히 많은 원소를 가진 Map에서는 검색이 효율적입니다.
딕셔너리: 딕셔너리는 대부분 작은 크기의 데이터에 최적화되어 있습니다. 큰 데이터 세트에서는 성능이 저하될 수 있습니다. 검색, 삽입, 삭제 작업은 일반적으로 상수 시간 O(1)에 이루어집니다.

4. 반복:
Map 객체: Map은 for...of 루프를 사용하여 직접 반복할 수 있으며, 메서드를 사용하여 원소에 접근할 수 있습니다. 또한, Map은 이터레이션 순서를 유지하므로 원소의 삽입 순서대로 반복됩니다.
딕셔너리: 딕셔너리는 객체로써 키-값 쌍을 저장하므로, for...in 루프를 사용하여 반복할 수 있습니다. 그러나 순서가 보장되지 않으므로 삽입 순서와 다를 수 있습니다.
딕셔너리는 객체 리터럴을 사용하여 생성되고, Map 객체는 new Map()을 사용하여 생성됩니다. 선택은 사용하는 데이터의 특성과 요구 사항에 따라 달라집니다. 딕셔너리는 간단한 키-값 저장소로 사용되는 반면, Map은 다양한 키 유형과 대량의 데이터 처리에 유용합니다.
*/

// Map 객체의 요소 삽입, 탐색, 요소 포함 확인, 삭제, 수정 예시 코드
// Map 객체 생성
let map = new Map();

// 요소 삽입
map.set("key1", "value1");
map.set("key2", "value2");
map.set("key3", "value3");

// 탐색
console.log(map.get("key1")); // 출력: "value1"

// 요소 포함 확인
console.log(map.has("key2")); // 출력: true

// 삭제
map.delete("key3");

// 수정
map.set("key1", "new value");

// 모든 요소 반복
for (let [key, value] of map) {
  console.log(key, value);
}

// Dictionary의 요소 삽입, 탐색, 요소 포함 확인, 삭제, 수정 예시 코드
// 딕셔너리 생성
let dictionary = {};

// 요소 삽입
dictionary["key1"] = "value1";
dictionary["key2"] = "value2";
dictionary["key3"] = "value3";

// 탐색
console.log(dictionary["key1"]); // 출력: "value1"

// 요소 포함 확인
console.log("key2" in dictionary); // 출력: true

// 삭제
delete dictionary["key3"];

// 수정
dictionary["key1"] = "new value";

// 모든 요소 반복
for (let key in dictionary) {
  console.log(key, dictionary[key]);
}

/** 
위의 코드에서 key1, key2, key3는 키로 사용되는 임의의 값이고, "value1", "value2", "value3"은 해당하는 값입니다. Map 객체에서는 set() 메서드를 사용하여 요소를 삽입하고, 딕셔너리에서는 간단하게 key 값을 인덱스로 사용하여 요소를 삽입합니다. 또한, Map 객체는 get() 메서드로 요소를 탐색하고, 딕셔너리는 인덱스를 통해 요소를 탐색합니다.

요소 포함 확인은 Map 객체에서 has() 메서드를 사용하거나 딕셔너리에서 in 연산자를 사용하여 확인할 수 있습니다. 삭제는 Map 객체에서 delete() 메서드를 사용하거나 딕셔너리에서 delete 연산자를 사용하여 요소를 삭제할 수 있습니다. 수정은 Map 객체와 딕셔너리에서 모두 요소를 다시 할당하여 수정할 수 있습니다.

마지막으로, 반복은 Map 객체에서는 for...of 루프를 사용하여 키-값 쌍을 반복하고, 딕셔너리에서는 for...in 루프를 사용하여 키를 반복하며 해당 키로 값을 조회할 수 있습니다.
*/