/** 
1. BFS(Breadth-First Search):
  - BFS는 그래프에서 가장 짧은 경로를 찾는데 사용되는 기본적인 탐색 알고리즘입니다.
  - BFS는 가중치가 없는 그래프에서 최단 경로를 찾을 수 있습니다.
    모든 가중치가 동일한 경우에만 최단 경로를 보장합니다.
  - 큐를 사용하여 탐색을 진행하며, 방문한 노드를 기록하고 해당 노드에 연결된 모든 이웃 노드를 탐색합니다.
  - BFS는 다익스트라나 플로이드 워셜과 같은 최단 거리 알고리즘에 비해 속도가 빠르지만,
    가중치가 다양한 경우에는 정확한 최단 경로를 보장하지 못합니다.

2. 다익스트라(Dijkstra's Algorithm):
  - 다익스트라 알고리즘은 가중치가 있는 그래프에서
    하나의 출발점으로부터 모든 노드까지의 최단 거리를 찾는 알고리즘입니다.
  - 우선순위 큐를 사용하여 최단 거리가 가장 짧은 노드를 선택하며, 그리디 알고리즘으로 분류됩니다.
  - 다익스트라 알고리즘은 음의 가중치가 없는 그래프에서만 사용할 수 있습니다.
  - 시간 복잡도는 O((V + E) log V)로, V는 노드의 수, E는 간선의 수를 의미합니다.

3. 플로이드 워셜(Floyd-Warshall Algorithm):
  - 플로이드 워셜 알고리즘은 모든 노드 쌍 간의 최단 거리를 구하는 알고리즘으로,
    동적 프로그래밍(Dynamic Programming) 방식을 사용합니다.
  - 음의 가중치가 있는 그래프에서도 사용할 수 있습니다.
  - 3중 반복문을 통해 모든 노드 쌍 간의 최단 거리를 구하는 특징이 있습니다.
  - 시간 복잡도는 O(V^3)로, V는 노드의 수를 의미합니다.

4. 벨만 포드(Bellman-Ford Algorithm):
  - 벨만 포드 알고리즘은 음의 가중치가 있는 그래프에서도 사용할 수 있는 최단 거리 알고리즘입니다.
  - 다익스트라 알고리즘이 그리디 방식으로 동작하는 반면,
    벨만 포드 알고리즘은 동적 프로그래밍 방식을 사용하여 최단 거리를 구합니다.
  - 최단 거리를 업데이트하는 단계를 V-1번 반복하며, 음수 사이클이 있는지 확인하는 과정도 포함됩니다.
  - 시간 복잡도는 O(VE)로, V는 노드의 수, E는 간선의 수를 의미합니다.

요약하면, BFS는 가중치가 없는 그래프에서만 사용되며, 다익스트라는 가중치가 양수인 그래프에서, 
플로이드 워셜은 모든 노드 쌍 간의 최단 거리를 구하는데 사용되며 음의 가중치도 처리할 수 있습니다.
벨만 포드는 음의 가중치를 갖는 그래프에서도 최단 거리를 구할 수 있으며,
음수 사이클을 탐지할 수 있는 특징이 있습니다.
따라서 문제의 조건과 그래프의 특성에 따라 알맞은 알고리즘을 선택하여 사용해야 합니다.
*/